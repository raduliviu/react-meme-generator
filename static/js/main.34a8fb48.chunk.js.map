{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","memes","setMemes","randomMeme","setRandomMeme","topText","setTopText","bottomText","setBottomText","useEffect","getData","a","jsonResponse","error","fetch","cache","response","ok","json","suitableMemes","data","filter","meme","box_count","console","log","message","className","type","value","onChange","event","target","placeholder","onClick","Math","floor","random","length","url","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA6DeA,MA1Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,iCAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,uCAAG,gCAAAC,EAAA,6DACVC,EAAe,CAAEC,MAAO,WADd,sDAIWC,MAJX,oCAIsB,CAAEC,MAAO,aAJ/B,YAINC,EAJM,QAKCC,GALD,iCAMWD,EAASE,OANpB,OAMVN,EANU,OAOJO,EAAgBP,EAAaQ,KAAKnB,MAAMoB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAClErB,EAASiB,GACTK,QAAQC,IAAIN,GATF,0DAYZK,QAAQC,IAAR,MACAb,EAAaC,MAAQ,KAAMa,QAbf,iCAePd,GAfO,0DAAH,qDAgCb,OACE,sBAAKe,UAAU,MAAf,UACE,sDACA,uBAAOC,KAAK,OAAOC,MAAOxB,EAASyB,SAXX,SAACC,GAC3BzB,EAAWyB,EAAMC,OAAOH,QAU4CI,YAAY,mBAC9E,uBAAOL,KAAK,OAAOC,MAAOtB,EAAYuB,SARX,SAACC,GAC9BvB,EAAcuB,EAAMC,OAAOH,QAO+CI,YAAY,sBACpF,wBAAQC,QAAS,WAlBnB5B,EAAW,IACXE,EAAc,IACdJ,EAAcH,EAAMkC,KAAKC,MAAMD,KAAKE,SAAWpC,EAAMqC,SAASC,MAgB5D,4BACA,sBAAKZ,UAAU,YAAf,UACE,qBAAKa,IAAKrC,EAAYsC,IAAI,SAC1B,oBAAId,UAAU,MAAd,SAAqBtB,IACrB,oBAAIsB,UAAU,SAAd,SAAwBpB,WC1CjBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.34a8fb48.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react';\n\nfunction App() {\n  const [memes, setMemes] = useState([])\n  const [randomMeme, setRandomMeme] = useState(\"http://i.imgflip.com/1bij.jpg\")\n  const [topText, setTopText] = useState(\"\")\n  const [bottomText, setBottomText] = useState(\"\")\n\n  useEffect(()=>{\n    getData()\n  }, [])\n\n  const getData = async () => {\n    let jsonResponse = { error: \"unknown\" };\n    let url = `https://api.imgflip.com/get_memes`\n    try {\n      const response = await fetch(url, { cache: 'no-cache' })\n      if (response.ok) {\n        jsonResponse = await response.json()\n        const suitableMemes = jsonResponse.data.memes.filter(meme => meme.box_count === 2)\n        setMemes(suitableMemes)\n        console.log(suitableMemes)\n      }\n    } catch (error) {\n      console.log(error);\n      jsonResponse.error = error.message\n    }\n    return jsonResponse\n  }\n\n  const pickRandomMeme = () => {\n    setTopText(\"\")\n    setBottomText(\"\")\n    setRandomMeme(memes[Math.floor(Math.random() * memes.length)].url)\n  }\n\n  const handleTopTextChange = (event) => {\n    setTopText(event.target.value)\n  }\n\n  const handleBottomTextChange = (event) => {\n    setBottomText(event.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React Meme Generator</h1>\n      <input type=\"text\" value={topText} onChange={handleTopTextChange} placeholder=\"Enter top text\"></input>\n      <input type=\"text\" value={bottomText} onChange={handleBottomTextChange} placeholder=\"Enter bottom text\"></input>\n      <button onClick={()=>{pickRandomMeme()}}>Random picture</button>\n      <div className=\"imageArea\">\n        <img src={randomMeme} alt=\"meme\"></img>\n        <h2 className=\"top\">{topText}</h2>\n        <h2 className=\"bottom\">{bottomText}</h2>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}