{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","memes","setMemes","randomMeme","setRandomMeme","useEffect","getData","a","jsonResponse","error","fetch","cache","response","ok","json","suitableMemes","data","filter","meme","box_count","console","log","message","className","type","onClick","Math","floor","random","length","src","url","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA8CeA,MA3Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,uCAAG,gCAAAC,EAAA,6DACVC,EAAe,CAAEC,MAAO,WADd,sDAIWC,MAJX,oCAIsB,CAAEC,MAAO,aAJ/B,YAINC,EAJM,QAKCC,GALD,iCAMWD,EAASE,OANpB,OAMVN,EANU,OAOJO,EAAgBP,EAAaQ,KAAKf,MAAMgB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAClEjB,EAASa,GACTK,QAAQC,IAAIN,GATF,0DAYZK,QAAQC,IAAR,MACAb,EAAaC,MAAQ,KAAMa,QAbf,iCAePd,GAfO,0DAAH,qDAsBb,OACE,sBAAKe,UAAU,MAAf,UACE,sDACA,uBAAOC,KAAK,SACZ,uBAAOA,KAAK,SACZ,wBAAQC,QAAS,WARnBrB,EAAcH,EAAMyB,KAAKC,MAAMD,KAAKE,SAAW3B,EAAM4B,WAQnD,4BACA,qBAAKN,UAAU,YAAf,SACGpB,GAAc,qBAAK2B,IAAK3B,EAAW4B,IAAKC,IAAI,eC5BtCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.556b0cf2.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react';\n\nfunction App() {\n  const [memes, setMemes] = useState([])\n  const [randomMeme, setRandomMeme] = useState(\"\")\n\n  useEffect(()=>{\n    getData()\n  }, [])\n\n  const getData = async () => {\n    let jsonResponse = { error: \"unknown\" };\n    let url = `https://api.imgflip.com/get_memes`\n    try {\n      const response = await fetch(url, { cache: 'no-cache' })\n      if (response.ok) {\n        jsonResponse = await response.json()\n        const suitableMemes = jsonResponse.data.memes.filter(meme => meme.box_count === 2)\n        setMemes(suitableMemes)\n        console.log(suitableMemes)\n      }\n    } catch (error) {\n      console.log(error);\n      jsonResponse.error = error.message\n    }\n    return jsonResponse\n  }\n\n  const pickRandomMeme = () => {\n    setRandomMeme(memes[Math.floor(Math.random() * memes.length)])\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React Meme Generator</h1>\n      <input type=\"text\"></input>\n      <input type=\"text\"></input>\n      <button onClick={()=>{pickRandomMeme()}}>Random picture</button>\n      <div className=\"imageArea\">\n        {randomMeme && <img src={randomMeme.url} alt=\"meme\"></img>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}