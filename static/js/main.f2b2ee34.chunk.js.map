{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","memes","setMemes","randomMeme","setRandomMeme","topText","setTopText","bottomText","setBottomText","uploadedMeme","setUploadedMeme","useEffect","getData","a","jsonResponse","error","fetch","cache","response","ok","json","suitableMemes","data","filter","meme","box_count","console","log","message","className","type","value","onChange","event","target","placeholder","onClick","document","getElementById","Math","floor","random","length","url","htmlFor","id","files","URL","revokeObjectURL","createObjectURL","domtoimage","toJpeg","quality","then","dataUrl","link","createElement","download","href","click","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6RAiHeA,MA7Gf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAwCR,mBAAS,IAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,uCAAG,gCAAAC,EAAA,6DACVC,EAAe,CAAEC,MAAO,WADd,sDAIWC,MAJX,oCAIsB,CAAEC,MAAO,aAJ/B,YAINC,EAJM,QAKCC,GALD,iCAMWD,EAASE,OANpB,OAMVN,EANU,OAOJO,EAAgBP,EAAaQ,KAAKrB,MAAMsB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAClEvB,EAASmB,GACTK,QAAQC,IAAIN,GATF,0DAYZK,QAAQC,IAAR,MACAb,EAAaC,MAAQ,KAAMa,QAbf,iCAePd,GAfO,0DAAH,qDA6Cb,OACE,sBAAKe,UAAU,MAAf,UACE,sDACA,sBAAKA,UAAU,YAAf,UACE,uBACEC,KAAK,OACLC,MAAO1B,EACP2B,SA1BoB,SAACC,GAC3B3B,EAAW2B,EAAMC,OAAOH,QA0BlBI,YAAY,mBACd,uBACEL,KAAK,OACLC,MAAOxB,EACPyB,SA3BuB,SAACC,GAC9BzB,EAAcyB,EAAMC,OAAOH,QA2BrBI,YAAY,sBACd,wBACEC,QAAS,WAzCfC,SAASC,eAAe,aAAaP,MAAQ,GAC7C3B,EAAc,IACdE,EAAW,IACXE,EAAc,IACdJ,EAAcH,EAAMsC,KAAKC,MAAMD,KAAKE,SAAWxC,EAAMyC,SAASC,MAoC1D,gCAGA,uBAAOC,QAAQ,YAAf,mCACA,uBACEd,KAAK,OACLe,GAAG,YACHb,SAAU,SAACC,GACTP,QAAQC,IAAIM,EAAMC,OAAOY,MAAM,IAC3BrC,GAAesC,IAAIC,gBAAgBvC,GACvCH,EAAW,IACXE,EAAc,IACdE,EAAgBuB,EAAMC,OAAOY,MAAM,IACnC1C,EAAc2C,IAAIE,gBAAgBhB,EAAMC,OAAOY,MAAM,QAGtD3C,GACC,wBAAQiC,QA1CK,WACrBc,IACGC,OAAOd,SAASC,eAAe,gBAAiB,CAAEc,QAAS,MAC3DC,MAAK,SAAUC,GACd,IAAIC,EAAOlB,SAASmB,cAAc,KAClCD,EAAKE,SAAW,eAChBF,EAAKG,KAAOJ,EACZC,EAAKI,YAmCD,8BAIN,sBACEd,GAAG,eACHhB,UAAU,YAFZ,UAIG1B,GACC,qBACEyD,IAAKzD,EACL0D,IAAI,SAGR,oBAAIhC,UAAU,MAAd,SAAqBxB,IACrB,oBAAIwB,UAAU,SAAd,SAAwBtB,WC9FjBuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1BwB,M","file":"static/js/main.f2b2ee34.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport domtoimage from 'dom-to-image';\n\nfunction App() {\n  const [memes, setMemes] = useState([])\n  const [randomMeme, setRandomMeme] = useState(\"\")\n  const [topText, setTopText] = useState(\"\")\n  const [bottomText, setBottomText] = useState(\"\")\n  const [uploadedMeme, setUploadedMeme] = useState(\"\")\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    let jsonResponse = { error: \"unknown\" };\n    let url = `https://api.imgflip.com/get_memes`\n    try {\n      const response = await fetch(url, { cache: 'no-cache' })\n      if (response.ok) {\n        jsonResponse = await response.json()\n        const suitableMemes = jsonResponse.data.memes.filter(meme => meme.box_count === 2)\n        setMemes(suitableMemes)\n        console.log(suitableMemes)\n      }\n    } catch (error) {\n      console.log(error);\n      jsonResponse.error = error.message\n    }\n    return jsonResponse\n  }\n\n  const pickRandomMeme = () => {\n    document.getElementById('imgUpload').value = ''\n    setRandomMeme(\"\")\n    setTopText(\"\")\n    setBottomText(\"\")\n    setRandomMeme(memes[Math.floor(Math.random() * memes.length)].url)\n  }\n\n  const handleTopTextChange = (event) => {\n    setTopText(event.target.value)\n  }\n\n  const handleBottomTextChange = (event) => {\n    setBottomText(event.target.value)\n  }\n\n  const handleDownload = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"composedMeme\"), { quality: 0.95 })\n      .then(function (dataUrl) {\n        var link = document.createElement(\"a\");\n        link.download = \"my-meme.jpeg\";\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>React Meme Generator</h1>\n      <div className=\"inputArea\">\n        <input \n          type=\"text\" \n          value={topText} \n          onChange={handleTopTextChange} \n          placeholder=\"Enter top text\"></input>\n        <input \n          type=\"text\" \n          value={bottomText} \n          onChange={handleBottomTextChange} \n          placeholder=\"Enter bottom text\"></input>\n        <button \n          onClick={() => { pickRandomMeme() }}\n        >Get a random image</button>\n        <label htmlFor=\"imgUpload\">Upload your own image</label>\n        <input \n          type=\"file\" \n          id=\"imgUpload\"\n          onChange={(event) => {\n            console.log(event.target.files[0]);\n            if (uploadedMeme) {URL.revokeObjectURL(uploadedMeme)}\n            setTopText(\"\")\n            setBottomText(\"\")\n            setUploadedMeme(event.target.files[0])\n            setRandomMeme(URL.createObjectURL(event.target.files[0]));\n          }}\n          ></input>\n          {randomMeme && (\n            <button onClick={handleDownload}>Download meme</button>\n          )}\n      </div>\n      \n      <div \n        id=\"composedMeme\" \n        className=\"imageArea\"\n        >\n        {randomMeme && (\n          <img \n            src={randomMeme} \n            alt=\"meme\"></img>\n        )}\n        \n        <h2 className=\"top\">{topText}</h2>\n        <h2 className=\"bottom\">{bottomText}</h2>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}