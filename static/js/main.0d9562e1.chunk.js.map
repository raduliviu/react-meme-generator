{"version":3,"sources":["Uploader.js","App.js","reportWebVitals.js","index.js"],"names":["App","useState","uploadedImg","setUploadedImg","className","alt","width","src","URL","createObjectURL","onClick","type","name","onChange","event","console","log","target","files","memes","setMemes","randomMeme","setRandomMeme","topText","setTopText","bottomText","setBottomText","useEffect","getData","a","jsonResponse","error","fetch","cache","response","ok","json","suitableMemes","data","filter","meme","box_count","message","value","placeholder","Math","floor","random","length","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAEe,SAASA,IACtB,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,uDACCF,GACC,gCACE,qBACEG,IAAI,YACJC,MAAO,QACPC,IAAKC,IAAIC,gBAAgBP,KAE3B,uBACA,wBAAQQ,QAAS,kBAAMP,EAAe,OAAtC,uBAGJ,uBAEA,uBACA,uBACEQ,KAAK,OACLC,KAAK,UACLC,SAAU,SAACC,GACTC,QAAQC,IAAIF,EAAMG,OAAOC,MAAM,IAC/Bf,EAAeW,EAAMG,OAAOC,MAAM,UCiD7BlB,MAxEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KACA,EAAoCnB,mBAAS,kCAA7C,mBAAOoB,EAAP,KAAmBC,EAAnB,KACA,EAA8BrB,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBC,EAAhB,KACA,EAAoCvB,mBAAS,IAA7C,mBAAOwB,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAO,uCAAG,gCAAAC,EAAA,6DACVC,EAAe,CAAEC,MAAO,WADd,sDAIWC,MAJX,oCAIsB,CAAEC,MAAO,aAJ/B,YAINC,EAJM,QAKCC,GALD,iCAMWD,EAASE,OANpB,OAMVN,EANU,OAOJO,EAAgBP,EAAaQ,KAAKnB,MAAMoB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAClErB,EAASiB,GACTtB,QAAQC,IAAIqB,GATF,0DAYZtB,QAAQC,IAAR,MACAc,EAAaC,MAAQ,KAAMW,QAbf,iCAePZ,GAfO,0DAAH,qDAgCb,OACE,sBAAK1B,UAAU,MAAf,UACE,sDACA,sBAAKA,UAAU,YAAf,UACE,uBACEO,KAAK,OACLgC,MAAOpB,EACPV,SAfoB,SAACC,GAC3BU,EAAWV,EAAMG,OAAO0B,QAelBC,YAAY,mBACd,uBACEjC,KAAK,OACLgC,MAAOlB,EACPZ,SAhBuB,SAACC,GAC9BY,EAAcZ,EAAMG,OAAO0B,QAgBrBC,YAAY,sBACd,wBACElC,QAAS,WA5Bfc,EAAW,IACXE,EAAc,IACdJ,EAAcH,EAAM0B,KAAKC,MAAMD,KAAKE,SAAW5B,EAAM6B,SAASC,MAyB1D,+BAKF,sBAAK7C,UAAU,YAAf,UACE,qBAAKG,IAAKc,EAAYhB,IAAI,SAC1B,oBAAID,UAAU,MAAd,SAAqBmB,IACrB,oBAAInB,UAAU,SAAd,SAAwBqB,OAE1B,cAAC,EAAD,QC1DSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d9562e1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function App() {\n  const [uploadedImg, setUploadedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <h1>Upload your own image</h1>\n      {uploadedImg && (\n        <div>\n          <img\n            alt=\"not found\"\n            width={\"250px\"}\n            src={URL.createObjectURL(uploadedImg)}\n          />\n          <br />\n          <button onClick={() => setUploadedImg(null)}>Remove</button>\n        </div>\n      )}\n      <br />\n\n      <br />\n      <input\n        type=\"file\"\n        name=\"myImage\"\n        onChange={(event) => {\n          console.log(event.target.files[0]);\n          setUploadedImg(event.target.files[0]);\n        }}\n      />\n    </div>\n  );\n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Uploader from './Uploader';\n\nfunction App() {\n  const [memes, setMemes] = useState([])\n  const [randomMeme, setRandomMeme] = useState(\"https://i.imgflip.com/1bij.jpg\")\n  const [topText, setTopText] = useState(\"\")\n  const [bottomText, setBottomText] = useState(\"\")\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    let jsonResponse = { error: \"unknown\" };\n    let url = `https://api.imgflip.com/get_memes`\n    try {\n      const response = await fetch(url, { cache: 'no-cache' })\n      if (response.ok) {\n        jsonResponse = await response.json()\n        const suitableMemes = jsonResponse.data.memes.filter(meme => meme.box_count === 2)\n        setMemes(suitableMemes)\n        console.log(suitableMemes)\n      }\n    } catch (error) {\n      console.log(error);\n      jsonResponse.error = error.message\n    }\n    return jsonResponse\n  }\n\n  const pickRandomMeme = () => {\n    setTopText(\"\")\n    setBottomText(\"\")\n    setRandomMeme(memes[Math.floor(Math.random() * memes.length)].url)\n  }\n\n  const handleTopTextChange = (event) => {\n    setTopText(event.target.value)\n  }\n\n  const handleBottomTextChange = (event) => {\n    setBottomText(event.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React Meme Generator</h1>\n      <div className=\"inputArea\">\n        <input \n          type=\"text\" \n          value={topText} \n          onChange={handleTopTextChange} \n          placeholder=\"Enter top text\"></input>\n        <input \n          type=\"text\" \n          value={bottomText} \n          onChange={handleBottomTextChange} \n          placeholder=\"Enter bottom text\"></input>\n        <button \n          onClick={() => { pickRandomMeme() }}\n        >Random picture</button>\n      </div>\n\n      <div className=\"imageArea\">\n        <img src={randomMeme} alt=\"meme\"></img>\n        <h2 className=\"top\">{topText}</h2>\n        <h2 className=\"bottom\">{bottomText}</h2>\n      </div>\n      <Uploader />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}